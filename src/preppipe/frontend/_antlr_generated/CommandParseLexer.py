# Generated from CommandParse.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,10,73,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,1,0,4,0,23,8,0,11,0,12,0,24,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
        8,5,8,45,8,8,10,8,12,8,48,9,8,1,8,1,8,1,8,5,8,53,8,8,10,8,12,8,56,
        9,8,1,8,1,8,1,8,5,8,61,8,8,10,8,12,8,64,9,8,1,8,3,8,67,8,8,1,9,4,
        9,70,8,9,11,9,12,9,71,3,46,54,62,0,10,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,1,0,11,9,0,9,10,13,13,32,32,160,160,8192,8203,
        8239,8239,8287,8287,12288,12288,65279,65279,2,0,35,35,65283,65283,
        2,0,91,91,12304,12304,2,0,93,93,12305,12305,2,0,58,58,65306,65306,
        2,0,61,61,65309,65309,2,0,44,44,65292,65292,1,0,34,34,1,0,39,39,
        1,0,8221,8221,22,0,9,10,13,13,32,32,34,35,39,39,44,44,58,58,61,61,
        91,91,93,93,160,160,8192,8203,8220,8221,8239,8239,8287,8287,12288,
        12288,12304,12305,65279,65279,65283,65283,65292,65292,65306,65306,
        65309,65309,79,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
        9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
        19,1,0,0,0,1,22,1,0,0,0,3,28,1,0,0,0,5,30,1,0,0,0,7,32,1,0,0,0,9,
        34,1,0,0,0,11,36,1,0,0,0,13,38,1,0,0,0,15,40,1,0,0,0,17,66,1,0,0,
        0,19,69,1,0,0,0,21,23,7,0,0,0,22,21,1,0,0,0,23,24,1,0,0,0,24,22,
        1,0,0,0,24,25,1,0,0,0,25,26,1,0,0,0,26,27,6,0,0,0,27,2,1,0,0,0,28,
        29,5,0,0,0,29,4,1,0,0,0,30,31,7,1,0,0,31,6,1,0,0,0,32,33,7,2,0,0,
        33,8,1,0,0,0,34,35,7,3,0,0,35,10,1,0,0,0,36,37,7,4,0,0,37,12,1,0,
        0,0,38,39,7,5,0,0,39,14,1,0,0,0,40,41,7,6,0,0,41,16,1,0,0,0,42,46,
        5,34,0,0,43,45,8,7,0,0,44,43,1,0,0,0,45,48,1,0,0,0,46,47,1,0,0,0,
        46,44,1,0,0,0,47,49,1,0,0,0,48,46,1,0,0,0,49,67,5,34,0,0,50,54,5,
        39,0,0,51,53,8,8,0,0,52,51,1,0,0,0,53,56,1,0,0,0,54,55,1,0,0,0,54,
        52,1,0,0,0,55,57,1,0,0,0,56,54,1,0,0,0,57,67,5,39,0,0,58,62,5,8220,
        0,0,59,61,8,9,0,0,60,59,1,0,0,0,61,64,1,0,0,0,62,63,1,0,0,0,62,60,
        1,0,0,0,63,65,1,0,0,0,64,62,1,0,0,0,65,67,5,8221,0,0,66,42,1,0,0,
        0,66,50,1,0,0,0,66,58,1,0,0,0,67,18,1,0,0,0,68,70,8,10,0,0,69,68,
        1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,20,1,0,0,0,
        7,0,24,46,54,62,66,71,1,6,0,0
    ]

class CommandParseLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    ELEMENT = 2
    COMMENTSTART = 3
    COMMANDSTART = 4
    COMMANDEND = 5
    COMMANDSEP = 6
    ASSIGNMENTOP = 7
    COMMAOP = 8
    QUOTEDSTR = 9
    NATURALTEXT = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\\u0000'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "ELEMENT", "COMMENTSTART", "COMMANDSTART", "COMMANDEND", 
            "COMMANDSEP", "ASSIGNMENTOP", "COMMAOP", "QUOTEDSTR", "NATURALTEXT" ]

    ruleNames = [ "WS", "ELEMENT", "COMMENTSTART", "COMMANDSTART", "COMMANDEND", 
                  "COMMANDSEP", "ASSIGNMENTOP", "COMMAOP", "QUOTEDSTR", 
                  "NATURALTEXT" ]

    grammarFileName = "CommandParse.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


